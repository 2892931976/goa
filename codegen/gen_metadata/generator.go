package genmetadata

import (
	"encoding/json"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/raphael/goa/codegen"
	"github.com/raphael/goa/design"

	"gopkg.in/alecthomas/kingpin.v2"
)

// Generator is the application code generator.
type Generator struct {
	genfiles []string
}

// Generate is the generator entry point called by the meta generator.
func Generate(api *design.APIDefinition) ([]string, error) {
	g, err := NewGenerator()
	if err != nil {
		return nil, err
	}
	return g.Generate(api)
}

// NewGenerator returns the application code generator.
func NewGenerator() (*Generator, error) {
	app := kingpin.New("Main generator", "application metadata generator")
	codegen.RegisterFlags(app)
	_, err := app.Parse(os.Args[1:])
	if err != nil {
		return nil, fmt.Errorf(`invalid command line: %s. Command line was "%s"`,
			err, strings.Join(os.Args, " "))
	}
	return new(Generator), nil
}

// MetadataDir is the path to the directory where the metadata controller is generated.
func MetadataDir() string {
	return filepath.Join(codegen.OutputDir, "metadata")
}

// Generate produces the skeleton main.
func (g *Generator) Generate(api *design.APIDefinition) ([]string, error) {
	controllerFile := filepath.Join(MetadataDir(), "metadata.go")
	tmpl, err := template.New("metadata").Parse(metadataTmpl)
	if err != nil {
		panic(err.Error()) // bug
	}
	gg := codegen.NewGoGenerator(controllerFile)
	g.genfiles = []string{controllerFile}
	imports := []*codegen.ImportSpec{
		codegen.SimpleImport("github.com/raphael/goa"),
	}
	gg.WriteHeader("", "metadata", imports)
	data := map[string]interface{}{
		"API": api,
	}
	err = tmpl.Execute(gg, data)
	if err != nil {
		g.Cleanup()
		return nil, err
	}
	if err := gg.FormatCode(); err != nil {
		g.Cleanup()
		return nil, err
	}
	jsonDir := filepath.Join(MetadataDir(), "files")
	s := APISchema(api)
	filename := filepath.Join(jsonDir, "api.json")
	f, err := os.Create(filename)
	if err != nil {
		return nil, err
	}
	defer f.Close()
	js, err := json.Marshal(s)
	if err != nil {
		return nil, err
	}
	f.Write(js)
	g.genfiles = append(g.genfiles, filename)
	err = api.IterateResources(func(r *design.ResourceDefinition) error {
		filename := filepath.Join(jsonDir, r.FormatName(true, false)) + ".json"
		s := ResourceSchema(api, r)
		f, err := os.Create(filename)
		if err != nil {
			return err
		}
		defer f.Close()
		js, err := json.Marshal(s)
		if err != nil {
			return err
		}
		f.Write(js)
		g.genfiles = append(g.genfiles, filename)
		return nil
	})
	if err != nil {
		return nil, err
	}
	return g.genfiles, nil
}

// Cleanup removes all the files generated by this generator during the last invokation of Generate.
func (g *Generator) Cleanup() {
	for _, f := range g.genfiles {
		os.Remove(f)
	}
	g.genfiles = nil
}

// tempCount is the counter used to create unique temporary variable names.
var tempCount int

// tempvar generates a unique temp var name.
func tempvar() string {
	tempCount++
	return fmt.Sprintf("c%d", tempCount)
}

const metadataTmpl = `
func Get(c *goa.Context) error {
	m := 
	return c.JSON(200, js)
}
`
