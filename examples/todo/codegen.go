/*****
 Auto-generated by goa, do not modify
******/
package main

import (
	"fmt"
	"time"

	"github.com/gorilla/mux"
	"github.com/raphael/goa"
)

func goa_MountAllHandlers(app goa.Application) {
	app.MountHandler(goa.GET, "?since={since}&view={view}", goa_TaskIndex)
	app.MountHandler(goa.GET, "/{id:[0-9]+}?view={view}", goa_TaskShow)
	app.MountHandler(goa.POST, "", goa_TaskCreate)
	app.MountHandler(goa.PUT, "/{id:[0-9]+}", goa_TaskUpdate)
	app.MountHandler(goa.DELETE, "/{id:[0-9]+}", goa_TaskDelete)
}

func goa_TaskResourceIndex(w http.ResponseWriter, r *http.Request) {
	c := &TaskController{w: w, r: r}
	if err := goa.CheckVersion(r, "1.0"); err != nil {
		c.RespondBadRequest("Bad or missing API version. Specify with \"?api_version=1.0\" param or \"X-API-VERSION=1.0\" header.")
		return
	}
	v := mux.Vars(r)
	s, ok := v["since"]
	var since *time.Time
	if ok {
		if since, err = goa.LoadDateTime(s); err != nil {
			c.RespondBadRequest("Failed to load param 'since': " + err.Error())
			return
		}
	}
	res := c.Index(since)
	if c.Status == 200 {
		if err := goa_ValidateTaskCollection(res); err != nil {
			c.RespondInvalidResponse(res, err)
			return
		}
		view, ok := v["view"]
		if !ok {
			view := "default"
		}
		data := goa_RenderTaskCollection(res, view)
		c.Send(data)
	} else {
		c.RespondInvalidResponseStatus(c.Status)
	}
}

func goa_TaskResourceShow(w http.ResponseWriter, r *http.Request) {
	c := &TaskController{w: w, r: r}
	if err := goa.CheckVersion(r, "1.0"); err != nil {
		c.RespondBadRequest("Bad or missing API version. Specify with \"?api_version=1.0\" param or \"X-API-VERSION=1.0\" header.")
		return
	}
	v := mux.Vars(r)
	id, ok := v["id"]
	if !ok {
		c.RespondBadRequest("Missing required parameter 'id'")
		return
	}
	var param0 uint64
	if param0, err = strconv.ParseUint(id, 10, 0); err != nil {
		c.RespondBadRequest("Failed to load param 'id': " + err.Error())
		return
	}
	res0, res1 := c.Show(uint(param0))
	if c.status == 200 {
		err := goa_ValidateTask(res0)
		if err != nil {
			c.RespondInvalidResponse(res, err)
			return
		}
		view, ok := v["view"]
		if !ok {
			view := "default"
		}
		data := goa_RenderTask(task, view)
		c.Send(data)
	} else if c.status == 404 {
		err := goa_ValidateResourceNotFound(res1)
		if err != nil {
			c.RespondInvalidResponse(res1, err)
			return
		}
		data := goa_RenderResourceNotFound(res1)
		c.Send(data)
	} else {
		c.RespondInvalidResponse(nil, "Controller action returned null")
	}
}

func goa_TaskCreate(w http.ResponseWriter, r *http.Request) {
	c := &TaskController{w: w, r: r}
	if err := goa.CheckVersion(r, "1.0"); err != nil {
		c.RespondBadRequest("Bad or missing API version. Specify with \"?api_version=1.0\" param or \"X-API-VERSION=1.0\" header.")
		return
	}
	payload, err := goa_LoadTaskDetails(r)
	if err != nil {
		c.RespondInvalidRequest("Invalid request body: " + err.Error())
	}
	c.Create(payload)
	c.Send("")
}

func goa_TaskUpdate(w http.ResponseWriter, r *http.Request) {
	c := &TaskController{w: w, r: r}
	if err := goa.CheckVersion(r, "1.0"); err != nil {
		c.RespondBadRequest("Bad or missing API version. Specify with \"?api_version=1.0\" param or \"X-API-VERSION=1.0\" header.")
		return
	}
	v := mux.Vars(r)
	id, ok := v["id"]
	if !ok {
		c.RespondBadRequest("Missing required parameter 'id'")
		return
	}
	var param0 uint64
	if param0, err = strconv.ParseUint(id, 10, 0); err != nil {
		c.RespondBadRequest("Failed to load param 'id': " + err.Error())
		return
	}
	payload, err := goa_LoadTaskDetails(r)
	if err != nil {
		c.RespondInvalidRequest("Invalid request body: " + err.Error())
		return
	}
	res0 := c.Update(payload, param0)
	if res0 != nil {
		err := goa_ValidateResourceNotFound(res)
		if err != nil {
			c.RespondInvalidResponse(res, err)
			return
		}
		data := goa_RenderResourceNotFound(res0)
		c.Send(data)
		return
	}
	c.Send("")
}

func goa_TaskDelete(w http.ResponseWriter, r *http.Request) {
	c := &TaskController{w: w, r: r}
	if err := goa.CheckVersion(r, "1.0"); err != nil {
		c.RespondBadRequest("Bad or missing API version. Specify with \"?api_version=1.0\" param or \"X-API-VERSION=1.0\" header.")
		return
	}
	v := mux.Vars(r)
	id, ok := v["id"]
	if !ok {
		c.RespondBadRequest("Missing required parameter 'id'")
		return
	}
	var param0 uint64
	if param0, err = strconv.ParseUint(id, 10, 0); err != nil {
		c.RespondBadRequest("Failed to load param 'id': " + err.Error())
		return
	}
	res0 := c.Delete(param0)
	if res0 != nil {
		err := goa_ValidateResourceNotFound(res)
		if err != nil {
			c.RespondInvalidResponse(res, err)
			return
		}
		data := goa_RenderResourceNotFound(res0)
		c.Send(data)
		return
	}
	c.Send("")
}
