/*****
 Auto-generated by goa, do not modify
******/
package main

import (
	"fmt"
	"github.com/gorilla/mux"
)

/*******************/
/* Task controller */
/******************/

type TaskController struct {
	w http.ResponseWriter
	r *http.Request
}

// Implements TaskResource
//
// func (c *TaskController) Index(since *time.Time) *TaskCollection { }
// func (c *TaskController) Show(id uint) (*Task, *ResourceNotFound) { }
// func (c *TaskController) Create(p *TaskDetails) { }
// func (c *TaskController) Update(body *TaskDetails, id uint) { }
// func (c *TaskController) Delete(id uint) *ResourceNotFound { }

// Interface implemented by object to be rendered into Task media type
type TaskData interface {
	Id() uint
	Details() string
}

// RenderTask initializes a Task media type from raw data.
// It first validates the data accordingly to the validation rules defined in
// the tags of the media type struct fields.
func RenderTask(d TaskData) (*Task, error) {
	id := d.Id()
	if id < 1 {
		return nil, fmt.Errorf("Bad id, must be at least 1")
	}
	details := d.Details()
	if len(details) < 1 {
		return nil, fmt.Errorf("Bad details, length must be at least 1")
	}
	return &Task{Id: id, Details: details}, nil
}

/*************/
/* Internals */
/*************/
func registerHandlers(app *app) {
	// TaskResource.Index
	m1 := app.router.Methods("GET")
	m1 = m1.Path("")
	m1 = m1.Queries("since", "{since}", "api_version", "{api_version}", "view", "{view}")
	m1.HandlerFunc(taskResourceIndex)
	// TaskResource.Show
	m2 := app.router.Methods("GET")
	m2 = m2.Path("/{id}")
	m2 = m2.Queries("id", "{id}", "api_version", "{api_version}", "view", "{view}")
	m2.HandlerFunc(taskResourceShow)
	// TaskResource.Create
	m3 := app.router.Methods("POST")
	m3 = m2.Path("")
	m3 = m2.Queries("api_version", "{api_version}")
	m3.HandlerFunc(taskResourceCreate)
	// TaskResource.Update
	m4 := app.router.Methods("PUT")
	m4 = m2.Path("/{id}")
	m4 = m2.Queries("id", "{id}", "api_version", "{api_version}")
	m4.HandlerFunc(taskResourceUpdate)
	// TaskResource.Delete
	m5 := app.router.Methods("DELETE")
	m5 = m2.Path("/{id}")
	m5 = m2.Queries("id", "{id}", "api_version", "{api_version}")
	m5.HandlerFunc(taskResourceDelete)
}
	
func taskResourceIndex(w http.ResponseWriter, r *http.Request) {
		c := &TaskController{w: w, r: r}
		if err := goa.CheckVersion(r, "1.0") {
			c.RespondBadRequest("Bad or missing API version. Specify with \"?api_version=1.0\" param or \"X-API-VERSION=1.0\" header.")
			return
		}
		v := mux.Vars(r)
		s, ok := v["since"]
		var since *time.Time
		if ok {
			if since, err = goa.LoadDateTime(s); err != nil {
				c.RespondBadRequest("Failed to load param 'since': " + err.Error())
				return
			}
		}
		res = c.Index(since)
		c.sendResponse(res, v["view"])
	}
}
