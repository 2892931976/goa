/*****
 Auto-generated by goa, do not modify
******/
package main

import (
	"fmt"
	"time"

	"github.com/gorilla/mux"
	"github.com/raphael/goa"
)

// Entry point - call this in your main
func goa_MountAllHandlers(app goa.Application) {
	goa_MountTaskHandlers(app)
}

//== TaskResource ==

type goa_TaskResource ResourceDefinition

var goa_TaskSchema = goa.Hash{
	"title": "Task media type",
	"type":  "object",
	"properties": goa.Hash{
		"Id": goa.Hash{
			"description": "Task identifier",
			"type":        "integer",
			"minimum":     1,
		},
		"User": goa.Hash{
			"description": "User email",
			"type":        "string",
			"pattern":     "^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$",
		},
		"Details": goa.Hash{
			"type":      "string",
			"minLength": 1,
		},
		"Kind": goa.Hash{
			"description": "Task kind",
			"type":        "string",
			"enum":        []string{"todo", "reminder"},
		},
		"ExpiresAt": goa.Hash{
			"description": "Todo expiration or reminder alarm timestamp",
			"type":        "string",
			"format":      "time.RFC3339",
		},
		"CreatedAt": goa.Hash{
			"description": "Creation timestamp",
			"type":        "string",
			"format":      "time.RFC3339",
		},
	},
}

func goa_MountTaskHandlers(app goa.Application) {
	l := gojsonschema.NewGoLoader(goa_TaskSchema)
	s, _ := gojsonschema.NewSchema(l)
	m := goa.MediaType{
		Identifier: "application/vnd.example.todo.task",
		Description: `Task media type
A task has a unique id, a kind which can be either 'todo' or 'reminder' and
details. A task also has a creation timestamp and an expiration timestamp.
(the idea is that todo tasks get deleted after the expiration timestamp while
reminders trigger a notification).
A task media type can be rendered using 2 different views:
  - The "default" view contains all the field contents and is used when
    retrieving a specific task (via the "Show" action).
  - The "tiny" view does not include the details and is used when retrieving
    a list of tasks (via the "Index" action).`,
		Schema: s,
		Views: goa.Views{
			"default": []string{"Id", "User", "Kind", "ExpiresAt", "CreatedAt"},
			"tiny":    []string{"Id", "User", "Details", "Kind", "ExpiresAt", "CreatedAt"},
		},
	}
	r := &goa_TaskResource{
		Name:        "task",
		Description: "Task resource",
		ApiVersion:  "1.0",
		RoutePrefix: "/tasks",
		MediaType:   &m,
		Actions:     map[string]ActionDefinition{},
	}
	app.MountHandler("GET", "?since={since}&view={view}", r.Index)
	app.MountHandler("GET", "/{id:[0-9]+}?view={view}", r.Show)
	app.MountHandler("POST", "", r.Create)
	app.MountHandler("PUT", "/{id:[0-9]+}", r.Update)
	app.MountHandler("DELETE", "/{id:[0-9]+}", r.Delete)
}

// GET /todo/tasks?[since={since}]&[view={view}]
func (t *goa_TaskResource) Index(w http.ResponseWriter, r *http.Request) {
	c := &TaskController{w: w, r: r}
	if err := goa.CheckVersion(r, "1.0"); err != nil {
		return
	}
	index := t.actions["Index"]
	params, err := url.ParseQuery(r.URL.RawQuery)
	if err != nil {
		c.RespondBadRequest("goa: " + err.Error())
		return
	}

	// Coerce and validate "since" parameter
	var cp0 *time.Time
	p0, ok := params["since"]
	if ok {
		err := goa.ValidateParameter(p0, "since", &index)
		if err != nil {
			c.RespondBadRequest("goa: " + err.Error())
			return
		}
		cp0, err = goa.CoerceParameter(p0, "since", &index)
		if err != nil {
			c.RespondBadRequest("goa: " + err.Error())
			return
		}
	}

	// Call controller Index method
	res := c.Index(cp0)

	// Validate response
	err = validateResponse(res, index)
	if err != nil {
		c.RespondInternalError("goa: " + err.Error())
		return
	}

	// Render media type
	view, ok := params["view"]
	if !ok {
		view := "default"
	}
	data := goa_RenderTaskCollection(res, view)

	// Send response
	c.Send(data)
}

func goa_TaskResourceShow(w http.ResponseWriter, r *http.Request) {
	c := &TaskController{w: w, r: r}
	if err := goa.CheckVersion(r, "1.0"); err != nil {
		c.RespondBadRequest("Bad or missing API version. Specify with \"?api_version=1.0\" param or \"X-API-VERSION=1.0\" header.")
		return
	}
	v := mux.Vars(r)
	id, ok := v["id"]
	if !ok {
		c.RespondBadRequest("Missing required parameter 'id'")
		return
	}
	var param0 uint64
	if param0, err = strconv.ParseUint(id, 10, 0); err != nil {
		c.RespondBadRequest("Failed to load param 'id': " + err.Error())
		return
	}
	res0, res1 := c.Show(uint(param0))
	if c.status == 200 {
		err := goa_ValidateTask(res0)
		if err != nil {
			c.RespondInvalidResponse(res, err)
			return
		}
		view, ok := v["view"]
		if !ok {
			view := "default"
		}
		data := goa_RenderTask(task, view)
		c.Send(data)
	} else if c.status == 404 {
		err := goa_ValidateResourceNotFound(res1)
		if err != nil {
			c.RespondInvalidResponse(res1, err)
			return
		}
		data := goa_RenderResourceNotFound(res1)
		c.Send(data)
	} else {
		c.RespondInvalidResponse(nil, "Controller action returned null")
	}
}

func goa_TaskCreate(w http.ResponseWriter, r *http.Request) {
	c := &TaskController{w: w, r: r}
	if err := goa.CheckVersion(r, "1.0"); err != nil {
		c.RespondBadRequest("Bad or missing API version. Specify with \"?api_version=1.0\" param or \"X-API-VERSION=1.0\" header.")
		return
	}
	payload, err := goa_LoadTaskDetails(r)
	if err != nil {
		c.RespondInvalidRequest("Invalid request body: " + err.Error())
	}
	c.Create(payload)
	c.Send("")
}

func goa_TaskUpdate(w http.ResponseWriter, r *http.Request) {
	c := &TaskController{w: w, r: r}
	if err := goa.CheckVersion(r, "1.0"); err != nil {
		c.RespondBadRequest("Bad or missing API version. Specify with \"?api_version=1.0\" param or \"X-API-VERSION=1.0\" header.")
		return
	}
	v := mux.Vars(r)
	id, ok := v["id"]
	if !ok {
		c.RespondBadRequest("Missing required parameter 'id'")
		return
	}
	var param0 uint64
	if param0, err = strconv.ParseUint(id, 10, 0); err != nil {
		c.RespondBadRequest("Failed to load param 'id': " + err.Error())
		return
	}
	payload, err := goa_LoadTaskDetails(r)
	if err != nil {
		c.RespondInvalidRequest("Invalid request body: " + err.Error())
		return
	}
	res0 := c.Update(payload, param0)
	if res0 != nil {
		err := goa_ValidateResourceNotFound(res)
		if err != nil {
			c.RespondInvalidResponse(res, err)
			return
		}
		data := goa_RenderResourceNotFound(res0)
		c.Send(data)
		return
	}
	c.Send("")
}

func goa_TaskDelete(w http.ResponseWriter, r *http.Request) {
	c := &TaskController{w: w, r: r}
	if err := goa.CheckVersion(r, "1.0"); err != nil {
		c.RespondBadRequest("Bad or missing API version. Specify with \"?api_version=1.0\" param or \"X-API-VERSION=1.0\" header.")
		return
	}
	v := mux.Vars(r)
	id, ok := v["id"]
	if !ok {
		c.RespondBadRequest("Missing required parameter 'id'")
		return
	}
	var param0 uint64
	if param0, err = strconv.ParseUint(id, 10, 0); err != nil {
		c.RespondBadRequest("Failed to load param 'id': " + err.Error())
		return
	}
	res0 := c.Delete(param0)
	if res0 != nil {
		err := goa_ValidateResourceNotFound(res)
		if err != nil {
			c.RespondInvalidResponse(res, err)
			return
		}
		data := goa_RenderResourceNotFound(res0)
		c.Send(data)
		return
	}
	c.Send("")
}
